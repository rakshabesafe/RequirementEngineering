version: '3.8'

volumes:
  postgres_data:
  minio_data:
  qdrant_data:
  neo4j_data:
  kong_db_data:

services:
  #--------------------------------------------------------------------------
  # INFRASTRUCTURE SERVICES
  #--------------------------------------------------------------------------
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=ai_platform_db # A single DB for simplicity in local dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 2s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage

  neo4j:
    image: neo4j:4.4
    container_name: neo4j
    ports:
      - "7474:7474" # Browser
      - "7687:7687" # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password
    volumes:
      - neo4j_data:/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password

  #--------------------------------------------------------------------------
  # GATEWAY (KONG)
  #--------------------------------------------------------------------------
  kong-db:
    image: postgres:13
    container_name: kong-db
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kong
      - POSTGRES_DB=kong
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    command: "kong migrations bootstrap"
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    depends_on:
      kong-db:
        condition: service_healthy
    restart: on-failure

  frontend-gateway:
    image: kong:latest
    container_name: frontend-gateway
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_DECLARATIVE_CONFIG=/etc/kong/kong.yml
    volumes:
      - ./frontend-gateway/kong.yml:/etc/kong/kong.yml
    ports:
      - "80:8000"   # Proxy
      - "443:8443"  # Proxy SSL
      - "8001:8001" # Admin API
    depends_on:
      kong-migrations:
        condition: service_completed_successfully

  #--------------------------------------------------------------------------
  # APPLICATION SERVICES
  #--------------------------------------------------------------------------
  project-input-service:
    build: ./project-input-service
    container_name: project-input-service
    # The command is now defined in the Dockerfile's CMD instruction
    ports:
      - "8011:8000"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  architecture-adr-service:
    build: ./architecture-adr-service
    container_name: architecture-adr-service
    # The command is now defined in the Dockerfile's CMD instruction
    ports:
      - "8012:8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  integration-and-sync-service:
    build: ./integration-and-sync-service
    container_name: integration-and-sync-service
    # The command is now defined in the Dockerfile's CMD instruction
    ports:
      - "8013:8000"
    environment:
      - JIRA_URL=https://your-jira-instance.atlassian.net
      - JIRA_USERNAME=your-email@example.com
      - JIRA_API_TOKEN=your-api-token
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  requirements-agent-service:
    build: ./requirements-agent-service
    container_name: requirements-agent-service
    # The command is now defined in the Dockerfile's CMD instruction
    ports:
      - "8014:8000"
    environment:
      - LLM_PROVIDER=openai # or 'ollama'
      # --- OpenAI Credentials ---
      - OPENAI_API_KEY=your-openai-api-key # IMPORTANT: Replace with your key
      # --- Ollama Configuration ---
      # Use this URL to connect to Ollama running on your host machine from the Docker container
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - OLLAMA_MODEL_NAME=llama3
    depends_on:
      - qdrant
      - rabbitmq
      - minio
      - integration-and-sync-service

  architecture-agent-service:
    build: ./architecture-agent-service
    container_name: architecture-agent-service
    command: tail -f /dev/null # Placeholder
    ports:
      - "8015:8000"
    depends_on:
      - qdrant
      - rabbitmq

  traceability-service:
    build: ./traceability-service
    container_name: traceability-service
    command: tail -f /dev/null # Placeholder
    ports:
      - "8016:8000"
    depends_on:
      - neo4j
      - rabbitmq

  diagram-generation-service:
    build: ./diagram-generation-service
    container_name: diagram-generation-service
    command: tail -f /dev/null # Placeholder
    ports:
      - "8017:8000"

  notification-service:
    build: ./notification-service
    container_name: notification-service
    command: tail -f /dev/null # Placeholder
    ports:
      - "8018:8000"
    depends_on:
      - rabbitmq

  frontend:
    build: ./frontend
    container_name: frontend
    # The command is now defined in the Dockerfile's CMD instruction
    ports:
      - "3000:80" # Map host port 3000 to container port 80 (Nginx)
    depends_on:
      - frontend-gateway
